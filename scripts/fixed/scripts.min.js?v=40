const takeFormValues = e => { var t, a, l = {}; for ([t, a] of new FormData(e).entries()) l[t] = a; return l }, loader = (e, t) => { t = t.querySelector("span"); !0 === e ? (t.innerText = "", t.setAttribute("class", "loader")) : (t.innerHTML = "Enviar mensaje", t.classList.remove("loader")) }, clearForm = () => { var e = form.querySelectorAll("input"); form.querySelector("textarea").value = "", e.forEach(e => { e.value = "" }) }, message = (e, t) => { const a = document.querySelector("#success-message"), l = document.querySelector("#error-message"); 200 !== e && 201 !== e || (clearForm(), a.classList.remove("display-none"), setTimeout(() => { a.classList.add("display-none") }, 2e3)), ("Failed to fetch" === e || 400 <= e) && (t.disabled = !0, l.classList.remove("display-none"), setTimeout(() => { t.disabled = !1, l.classList.add("display-none") }, 2e3)) }, inputValidator = e => { var t = e.value, a = e.dataset.input, l = document.querySelector(`span[data-span="${a}"]`); return { name: /^[a-zA-ZÀ-ÿ\s]{1,40}$/, email: /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/, tel: /^\d{7,14}$/, message: /^[\x20-\x7E]{1,500}$/ }[a].test(t) ? (e.classList.remove("outline-red"), l.classList.add("display-none"), !0) : (e.classList.add("outline-red"), l.classList.remove("display-none"), !1) }, formValidator = e => { e = e.querySelectorAll("input, textarea, select"); let a = !0; return e.forEach(e => { var t = inputValidator(e); inputValidator(e), !1 === t && (a = !1) }), a }, handlers = { loader: loader, message: message, clearForm: clearForm, takeFormValues: takeFormValues, validateForm: formValidator, validateInput: inputValidator }, form = document.getElementById("form-contact"), bt = document.querySelector(".js-bt-loader"), inputs = form.querySelectorAll("input, textarea, select"), captchaSiteKey = "6Lf6wzokAAAAAH28aI1isbEpoeNkOe9C1jZl9HmT", postData = async e => { var t = "https://api2.columnis.com/101/columnis/contact_forms/1/send", e = { url: t, method: "post", headers: { "Content-Type": "application/json" }, body: JSON.stringify(e) }; try { return (await fetch(t, e)).status } catch (e) { return e.message } }; function getCaptchaToken(t) { grecaptcha.ready(function () { grecaptcha.execute(captchaSiteKey).then(function (e) { t(e) }) }) } const submitForm = () => { form.addEventListener("submit", async e => { e.preventDefault(), handlers.validateForm(form) && (handlers.loader(!0, bt), getCaptchaToken(async e => { var t = handlers.takeFormValues(form), e = (t.captchaToken = e, await postData(t)); handlers.loader(!1, bt), handlers.message(e, bt) })) }) }; inputs.forEach(t => { t.addEventListener("blur", e => handlers.validateInput(t)), t.addEventListener("keyup", e => handlers.validateInput(t)) }); let map; function initMap() { document.querySelectorAll(".contact-map").forEach(e => { map = new google.maps.Map(e, { center: { lat: asistMapLat, lng: asistMapLgn }, zoom: 17, styles: [{ featureType: "administrative", elementType: "labels.text", stylers: [{ visibility: "off" }] }, { featureType: "administrative.locality", elementType: "labels.text", stylers: [{ visibility: "off" }] }, { featureType: "administrative.neighborhood", elementType: "labels.text", stylers: [{ visibility: "off" }] }, { featureType: "administrative.neighborhood", elementType: "labels.icon", stylers: [{ weight: "5.60" }] }, { featureType: "landscape.man_made", elementType: "labels.text", stylers: [{ visibility: "off" }] }, { featureType: "landscape.natural", elementType: "geometry.fill", stylers: [{ visibility: "on" }, { color: "#e0efef" }] }, { featureType: "landscape.natural", elementType: "labels.text", stylers: [{ visibility: "off" }] }, { featureType: "poi", elementType: "geometry.fill", stylers: [{ visibility: "off" }, { color: "#c0e8e8" }] }, { featureType: "poi", elementType: "labels.text", stylers: [{ visibility: "off" }] }, { featureType: "poi", elementType: "labels.icon", stylers: [{ visibility: "off" }] }, { featureType: "road", elementType: "geometry", stylers: [{ lightness: 100 }, { visibility: "simplified" }] }, { featureType: "road", elementType: "labels", stylers: [{ visibility: "off" }] }, { featureType: "road.highway", elementType: "labels.text", stylers: [{ visibility: "simplified" }, { color: "#767676" }] }, { featureType: "road.highway.controlled_access", elementType: "labels.text", stylers: [{ visibility: "on" }] }, { featureType: "road.arterial", elementType: "labels.text", stylers: [{ visibility: "simplified" }, { color: "#717171" }, { lightness: "-4" }, { weight: "0.01" }] }, { featureType: "road.local", elementType: "labels.text", stylers: [{ visibility: "on" }] }, { featureType: "road.local", elementType: "labels.text.fill", stylers: [{ visibility: "off" }] }, { featureType: "transit", elementType: "labels.text", stylers: [{ visibility: "off" }] }, { featureType: "transit", elementType: "labels.icon", stylers: [{ visibility: "off" }] }, { featureType: "transit.line", elementType: "geometry", stylers: [{ visibility: "on" }, { lightness: 700 }] }, { featureType: "transit.line", elementType: "labels.text", stylers: [{ visibility: "off" }] }, { featureType: "water", elementType: "all", stylers: [{ color: "#7dcdcd" }] }, { featureType: "water", elementType: "labels.text.fill", stylers: [{ visibility: "off" }] }] }); e = { path: "M21.35,49.4C26.42,43.05,38,27.65,38,19A19,19,0,0,0,0,19c0,8.65,11.58,24,16.65,30.4a3,3,0,0,0,4.7,0ZM19,25.33A6.33,6.33,0,1,1,25.33,19,6.34,6.34,0,0,1,19,25.33Z", fillColor: "#00c6ef", fillOpacity: 1, strokeWeight: 0, scale: 1, anchor: new google.maps.Point(15, 30) }; new google.maps.Marker({ position: { lat: asistMapLat, lng: asistMapLgn }, map: map, icon: e }) }) } submitForm(), handlers.takeFormValues(form);